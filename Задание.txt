Информационный портал киберспортивных турниров

Необходимо спроектировать и реализовать портал по сбору и отображению статистики киберспортивных соревнований. 
Портал
Портал должен содержать информацию про
1. Игры, команды, игроки, турниры, матчи. Для всех объектов нужно иметь название описание и логотип. Дополнительно:
Страница команды должен содержать список своих игроков, опционально список последних 5 турниров, на которых участвовала.
Турниры должны содержать список команд (участников), информацию об этапах,  даты проведения и расписание матчей. Предпочтительно визуализировать сетку проведения туров. 
Матчи должны содержать результаты, составы команд и опционально - ссылки на видеоматериалы (а если не завершен, то и лайв стриму). Можно показать информацию о карте, на котором проходил матч (не для всех дисциплин). Дополнительно можно на временной шкале (timeline) показать ключевые события матча.
Все объекты(игроки, турниры и т.п) в системе должны иметь унифицированные ссылки (uri).
2. Для каждой игры показать: 
турнирные таблицы, 
списки топ, текущих, архивных турниров с результатами, 
топ команд по каждой игре, 
рейтинг игроков внутри турнира и глобально.
Сбор статистики
Нужно спроектировать унифицированное API для сторонних организаторов турниров, что позволит им предоставить статистику чемпионатов и организованных турниров. Для этого нужно предоставить доступ по защищенному каналу.
Для внешних интеграций нужно:
Авторизация и аутентификация сторонних приложений.
Протокол для базовых манипуляций объектами (CRUD) турниров, матчей, команд и игроков.
Возможность добавления текстовых комментарий на события во время прямых трансляций.
Опционально предоставить автоматически сгенерированную документацию по апи.
Предпочтительно давать возможность руководителям зарегистрировать свои команды в системе и редактировать состав с личного кабинета. 

Технологии
Для реализации проекта нужно воспользоваться трехзвенной архитектурой. 
Клиентский слой должен быть полноценным SPA (одностраничное приложение) на HTML и Javascript. Рекомендуется использовать популярные клиентские библиотеки. Опционально можно организовать прямую трансляцию событий с использованием WebSockets.
Сервер должен предоставить JSON REST API для клиентского приложения и для сторонних интеграций. Нужно реализовать протокол авторизации OAuth 2, позволяющий выдать доступ сторонним приложениям. Язык программирования можно выбрать любой. Нужно использовать Nginx веб сервер с балансировкой нагрузки и возможностью горизонтального масштабирования. Рекомендуется использовать серверную ос Ubuntu или CentOS.
Слой данных должен иметь реляционную базу данных с опциональным NoSQL решением. Нужно спроектировать горизонтально масштабируемую базу данных. Предпочтительно иметь также очередь событий для отложенного исполнения тяжелых процессов.

https://docs.google.com/document/d/1rLx7vA2ToHeoqUoryAehuM-JSAUU8lcR-hLK9p36Mak
