// https://contest.yandex.ru/contest/7595/problems/6/
// –ü–æ—Ä—è–¥–∫–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
// —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
// –î–∞–Ω—ã –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ n, k –∏ –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0..109] —Ä–∞–∑–º–µ—Ä–∞ n.
// –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ k-—é –ø–æ—Ä—è–¥–∫–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —á–∏—Å–ª–æ,
// –∫–æ—Ç–æ—Ä–æ–µ –±—ã —Å—Ç–æ—è–ª–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º k ‚àà[0..n-1] –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
// –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º.
// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏: O(n).
// –¢—Ä–µ–±—É–µ–º–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: O(n).
// –§—É–Ω–∫—Ü–∏—é Partition —Å–ª–µ–¥—É–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Ö–æ–¥–∞ –¥–≤—É–º—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –æ—Ç –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞ –∫ –Ω–∞—á–∞–ª—É.
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—ã–±–æ—Ä–∞ –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ "—Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç".
//
// // –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è –ø—Ä–æ—Ö–æ–¥–∞ –æ—Ç –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞ –∫ –∫–æ–Ω—Ü—É:
// –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
// –û–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—è–µ—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞.
// –í–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã Partition –≤ –Ω–∞—á–∞–ª–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –±–æÃÅ–ª—å—à–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ.
// –ó–∞—Ç–µ–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã, —Å—Ç—Ä–æ–≥–æ –±–û–ª—å—à–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ.
// –í –∫–æ–Ω—Ü–µ –º–∞—Å—Å–∏–≤–∞ –ª–µ–∂–∞—Ç –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
// –ü–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –ª–µ–∂–∏—Ç –æ–ø–æ—Ä–Ω—ã–π.
// –ò—Ç–µ—Ä–∞—Ç–æ—Ä (–∏–Ω–¥–µ–∫—Å) i —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –≥—Ä—É–ø–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—Ç—Ä–æ–≥–æ –±–æÃÅ–ª—å—à–∏—Ö –æ–ø–æ—Ä–Ω–æ–≥–æ.
// –ò—Ç–µ—Ä–∞—Ç–æ—Ä j –±–æ–ª—å—à–µ i, –∏—Ç–µ—Ä–∞—Ç–æ—Ä j —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
// –®–∞–≥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞, –ø–æ–∫–∞ j < a.len:
//     –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç j.
//     –ï—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ,
//         —Ç–æ —Å–¥–≤–∏–≥–∞–µ–º j.
//     –ï—Å–ª–∏ –æ–Ω –Ω–µ –±–æ–ª—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ,
//         —Ç–æ –º–µ–Ω—è–µ–º a[i] –∏ a[j] –º–µ—Å—Ç–∞–º–∏,
//         —Å–¥–≤–∏–≥–∞–µ–º i –∏ —Å–¥–≤–∏–≥–∞–µ–º j.
// –í –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–µ–Ω—è–µ–º –æ–ø–æ—Ä–Ω—ã–π –∏ —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä i.

//  0123456789 <= –æ–ø–æ—Ä–Ω–æ–≥–æ < ùü¨ùü≠ùüÆùüØùü∞ùü±ùü≤ùü≥ùü¥ùüµ
//||2 8 7 1 3 5 6|4
// |2|8 7 1 3 5 6|4
//  2|ùü¥|7 1 3 5 6|4
//  2|ùü¥ ùü≥|1 3 5 6|4
//  2 1|ùü≥ ùü¥|3 5 6|4
//  2 1 3|ùü¥ ùü≥|5 6|4
//  2 1 3|ùü¥ ùü≥ ùü±|6|4
//  2 1 3|ùü¥ ùü≥ ùü± ùü≤|4
//  2 1 3 4|ùü≥ ùü± ùü≤ ùü¥|

// –í–≤–æ–¥
// 10 4
// 1 2 3 4 5 6 7 8 9 10
// –í—ã–≤–æ–¥
// 5

// –í–≤–æ–¥
// 10 0
// 3 6 5 7 2 9 8 10 4 1
// –í—ã–≤–æ–¥
// 1

// –í–≤–æ–¥
// 10 9
// 0 0 0 0 0 0 0 0 0 1
// –í—ã–≤–æ–¥
// 1

#include <iostream>
#include <random>
#include <vector>

// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É left_index –∏ right_index –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ü—ã.
// –µ—Å–ª–∏ left_index == right_index —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ, –Ω–µ–ª—å–∑—è –¥–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0.
int get_pivot_index(int left_index, int right_index) {
    if(left_index == right_index){
        return left_index;
    }
    int pivot_index = left_index + rand() % (right_index - left_index);
    return pivot_index;
}

// –ø—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
template<class stored_type>
int Partition(stored_type *array, int left_index, int right_index) {
    int pivot_index = get_pivot_index(left_index, right_index);
    std::swap(array[pivot_index], array[right_index]); // —Å—Ç–∞–≤–∏–º –æ–ø–æ—Ä–Ω—ã–π –≤ –∫–æ–Ω–µ—Ü
    stored_type pivot = array[right_index];
    int last_not_greater = left_index - 1;
    for (auto first_not_considered = left_index; first_not_considered < right_index; ++first_not_considered) {
        if (array[first_not_considered] < pivot) {
            ++last_not_greater;
            std::swap(array[last_not_greater], array[first_not_considered]);
        }
    }
    std::swap(array[last_not_greater + 1], array[right_index]);
    return last_not_greater + 1;
}

// –æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
template<class stored_type>
int Partition2(stored_type *array, int left_index, int right_index) {
    int pivot_index = get_pivot_index(left_index, right_index);
    std::swap(array[pivot_index], array[left_index]);
    stored_type pivot = array[left_index];
    int first_greater = right_index + 1;
    for (auto first_not_considered = right_index; first_not_considered > left_index; --first_not_considered) {
        if (array[first_not_considered] > pivot) {
            --first_greater;
            std::swap(array[first_greater], array[first_not_considered]);
        }
    }
    std::swap(array[first_greater - 1], array[left_index]);
    return first_greater - 1;
}

template<class stored_type>
stored_type ordinal_statistics(stored_type *array, int end_index, int searched_index) {
    int begin_index = 0;
    while (true) {
        int founded_index = Partition2(array, begin_index, end_index);
        if (founded_index - begin_index == searched_index) {
            return array[founded_index];
        } else if (founded_index - begin_index + 1 > searched_index) {
            end_index = founded_index - 1;
        } else {
            searched_index = searched_index - (founded_index - begin_index + 1);
            begin_index = founded_index + 1;
        }
    }
};

int main() {
    size_t array_len = 0, reqired_index = 0;
    std::cin >> array_len >> reqired_index;
    int vector[array_len];
    for (int i = 0; i < array_len; i++) {
        int tmp = 0;
        std::cin >> tmp;
        vector[i] = tmp;
    }
    int found_value = ordinal_statistics(vector, array_len - 1, reqired_index);
    std::cout << found_value << std::endl;
    return 0;
}
